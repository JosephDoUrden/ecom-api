name: E-Commerce API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ecommerce_user
          POSTGRES_PASSWORD: ecommerce_pass
          POSTGRES_DB: ecommerce
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: ./mvnw clean verify

      - name: Run tests
        run: ./mvnw test

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarQube
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [ -n "$SONAR_TOKEN" ] && [ -n "$SONAR_HOST_URL" ]; then
            ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ecom-api
          else
            echo "SonarQube analysis skipped: tokens not available"
          fi

      - name: Build and publish Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            josephdourden/ecom-api:${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
          cache-from: type=registry,ref=josephdourden/ecom-api:buildcache
          cache-to: type=registry,ref=josephdourden/ecom-api:buildcache,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: josephdourden
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Pull latest image
        run: docker pull josephdourden/ecom-api:develop
      
      - name: Deploy to Dev Environment
        run: |
          echo "Deploying to development environment..."
          # Add deployment scripts here (e.g., kubectl apply, SSH commands, etc.)
          # This is a placeholder for actual deployment logic
          echo "Deployed successfully to development environment"
        env:
          DOCKER_IMAGE: josephdourden/ecom-api:develop
